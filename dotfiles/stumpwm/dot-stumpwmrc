;; Hey, Emacs! This is a -*- lisp -*- file!
(in-package :stumpwm)

;; basic stuff
(defun x-setup-once ()
  (defvar *x-setup-initialized*)
  (if (boundp '*x-setup-initialized*)
      (message "Already initialized, so skipping X setup.")
      (progn
        ;; (run-shell-command "stalonetray")
        ;;(run-shell-command "nm-applet --sm-disable")
        (run-shell-command "gnome-screensaver &")
        (run-shell-command "dropbox start")
        (setq *x-setup-initialized* t)

        ;; startup stuff - safe to do this multiple times
        ;;(run-shell-command (concatenate 'string "xsetbg -border black -center " home "/Pictures/stumpwm_wallpaper.jpg"))
        (run-shell-command "emacs")
        )))

;; because it never hurts to be able to load external modules
(load "~/quicklisp/setup.lisp")
(ql:quickload :iterate)

;; utility functions

(defun generate (from to &optional (by 1))
  #'(lambda (f)
      (when (< from to)
        (prog1 (or (funcall f from) t)
          (incf from by)))))

(defmacro with-generator ((var from to &optional (by 1)) &body body)
  (let ((generator (gensym)))
    `(loop with ,generator = (generate ,from ,to ,by)
	   while
	   (funcall ,generator
		    #'(lambda (,var) ,@body)))))

(defun append-int (text i)
  (concatenate 'string text (write-to-string i)))

;; custom stumpwm-commands

(defcommand screen-saver () ()
            "Turns off the screen until a key is pressed"
            (run-shell-command
             "gnome-screensaver-command -l"))

(defcommand firefox () ()
            "Start Firefox unless it is already running, in which case focus it."
            (run-or-raise "firefox" '(:class "Firefox")))

(defcommand spotify () ()
            "Start Spotify unless it is already running, in which case focus it."
            (run-or-raise "spotify" '(:class "Spotify")))



;; for debugging/fooling around - doesnt work yet.
(ql:quickload :swank)
(defcommand swank () ()
            (swank:create-server :port 4005
                                 :style swank:*communication-style*
                                 :dont-close t)
            (echo-string (current-screen)
                         "Starting swank. M-x slime-connect RET RET, then (in-package stumpwm)."))
;;(swank)


;; X setup
(x-setup-once)

;; my hotkeys  (more info on http://stumpwm.svkt.org/cgi-bin/wiki.pl)

(set-prefix-key (kbd "s-t")) ;; whatever which ISNT C-t.

(define-key *root-map* (kbd "DEL") "quit")
(define-key *top-map* (kbd "C-M-l") "screen-saver") ;; like unity/ubuntu
(define-key *root-map* (kbd "M-s") "spotify")
(define-key *root-map* (kbd "d") "firefox")
(define-key *root-map* (kbd "c") "exec x-terminal-emulator")
(define-key *top-map* (kbd "M-Tab") "pull-hidden-next")
(define-key *top-map* (kbd "s-Tab") "fnext")
;;(define-key *top-map* (kbd "XF86AudioRaiseVolume") "raise-volume")
;;(define-key *top-map* (kbd "XF86AudioLowerVolume") "lower-volume")
;;(define-key *top-map* (kbd "XF86AudioMute") "toggle-mute-volume")

;; goodies for tweakers
(define-key *root-map* (kbd "s-r") "loadrc")

;; i3-like workspace navigation

(defun i3-combinator (key-prefix command-prefix)
  (with-generator (i 1 12)
    (let ((key (append-int key-prefix i))
	  (cmd (append-int command-prefix i)))
      (define-key *top-map* (kbd key) cmd))))

;; s-F1 -> gselect 1
(i3-combinator "s-F" "gselect ")

;; S-s-F1 -> gmove 1
(i3-combinator "S-s-F" "gmove ")

(define-key *top-map* (kbd "s-Right") "move-focus right")
(define-key *top-map* (kbd "s-Left")  "move-focus left")
(define-key *top-map* (kbd "s-Up")    "move-focus up")
(define-key *top-map* (kbd "s-Down")  "move-focus down")

(define-key *top-map* (kbd "S-s-Right") "gnext")
(define-key *top-map* (kbd "S-s-Left") "gprev")

(define-key *top-map* (kbd "C-s-S-Right") "gnext-with-window")
(define-key *top-map* (kbd "C-s-S-Left") "gprev-with-window")

(define-key *top-map* (kbd "s-r") "iresize")
(define-key *top-map* (kbd "s-S") "vsplit")
(define-key *top-map* (kbd "s-s") "hsplit")
(define-key *top-map* (kbd "s-q") "only")

;; TODO: autocreate work-spaces


;; swap CAPS and CTRL
;; (run-shell-command "setxkbmap -option ctrl:swapcaps")

(setq *window-format* "%n%s%80t [%20c]")

;; TODO: Modeline

;; (toggle-mode-line (current-screen)
;; 		  (current-head))

;; (setf *screen-mode-line-format*
;;       (list "%w | "
;;             '(:eval (run-shell-command "date" t))))

;; (setf *mode-line-position* :bottom)
