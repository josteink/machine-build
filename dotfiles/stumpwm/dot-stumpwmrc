;; Hey, Emacs! This is a -*- lisp -*- file!
(in-package :stumpwm)


;; basic stuff
(defun x-setup-once ()
  (defvar *x-setup-initialized*)
  (if (boundp '*x-setup-initialized*)
      (message "Already initialized, so skipping X setup.")
      (progn
        (run-shell-command "stalonetray")
        ;;(run-shell-command "nm-applet --sm-disable")
        (run-shell-command "gnome-screensaver &")
	(run-shell-command "dropbox start")
        (setq *x-setup-initialized* t)

	;; startup stuff - safe to do this multiple times
	;;(run-shell-command (concatenate 'string "xsetbg -border black -center " home "/Pictures/stumpwm_wallpaper.jpg"))
	(run-shell-command "emacs")
	)))

;; because it never hurts to be able to load external modules
(load "~/quicklisp/setup.lisp")


;; custom-commands
(defcommand screen-saver () ()
  "Turns off the screen until a key is pressed"
  (run-shell-command
   "gnome-screensaver-command -l"))

(defcommand firefox () ()
  "Start Firefox unless it is already running, in which case focus it."
  (run-or-raise "firefox" '(:class "Firefox")))

(defcommand spotify () ()
	    "Start Spotify unless it is already running, in which case focus it."
	    (run-or-raise "spotify" '(:class "Spotify")))

(defcommand reconfigure () ()
  "Re-load and re-apply configuration."
  (load "~/.stumpwmrc"))


;; for debugging/fooling around - doesnt work yet.
(ql:quickload :swank)
(defcommand swank () ()
  (swank:create-server :port 4005
                       :style swank:*communication-style*
                       :dont-close t)
  (echo-string (current-screen)
               "Starting swank. M-x slime-connect RET RET, then (in-package stumpwm)."))

;;(swank)


;; X setup
(x-setup-once)

;; my hotkeys  (more info on http://stumpwm.svkt.org/cgi-bin/wiki.pl)
(define-key *root-map* (kbd "DEL") "quit")
(define-key *root-map* (kbd "L") "screen-saver")
(define-key *top-map* (kbd "C-M-l") "screen-saver") ;; like unity/ubuntu
(define-key *root-map* (kbd "M-s") "spotify")
(define-key *root-map* (kbd "d") "firefox")
(define-key *root-map* (kbd "c") "exec x-terminal-emulator")
;;(define-key *top-map* (kbd "XF86AudioRaiseVolume") "raise-volume")
;;(define-key *top-map* (kbd "XF86AudioLowerVolume") "lower-volume")
;;(define-key *top-map* (kbd "XF86AudioMute") "toggle-mute-volume")
(define-key *top-map* (kbd "M-Tab") "pull-hidden-next")
(define-key *top-map* (kbd "s-Tab") "fnext")

;; goodies for tweakers
(define-key *root-map* (kbd "C-r") "reconfigure")

;; i3-like workspace navigation
;; TODO: learn how to do this efficiently in CL.
(define-key *top-map* (kbd "s-F1") "gselect 1")
(define-key *top-map* (kbd "s-F2") "gselect 2")
(define-key *top-map* (kbd "s-F3") "gselect 3")
(define-key *top-map* (kbd "s-F4") "gselect 4")
(define-key *top-map* (kbd "s-F5") "gselect 5")
(define-key *top-map* (kbd "s-F6") "gselect 6")
(define-key *top-map* (kbd "s-F7") "gselect 7")

(define-key *top-map* (kbd "S-s-F1") "gmove 1")
(define-key *top-map* (kbd "S-s-F2") "gmove 2")
(define-key *top-map* (kbd "S-s-F3") "gmove 3")
(define-key *top-map* (kbd "S-s-F4") "gmove 4")
(define-key *top-map* (kbd "S-s-F5") "gmove 5")
(define-key *top-map* (kbd "S-s-F6") "gmove 6")
(define-key *top-map* (kbd "S-s-F7") "gmove 7")

(define-key *top-map* (kbd "s-Right") "move-focus right")
(define-key *top-map* (kbd "s-Left")  "move-focus left")
(define-key *top-map* (kbd "s-Up")    "move-focus up")
(define-key *top-map* (kbd "s-Down")  "move-focus down")

(define-key *top-map* (kbd "S-s-Right") "gnext")
(define-key *top-map* (kbd "S-s-Left") "gprev")

(define-key *top-map* (kbd "c-s-S-Right") "gnext-with-window")
(define-key *top-map* (kbd "c-s-S-Left") "gprev-with-window")


;; TODO: autocreate work-spaces

;; swap CAPS and CTRL
;; (run-shell-command "setxkbmap -option ctrl:swapcaps")

(setq *window-format* "%n%s%80t [%20c]")

;; TODO: add things for
;; -- Command: gnext
;; Cycle to the next group in the group list.

;; -- Command: gprev
;; Cycle to the previous group in the group list.

;; -- Command: gnext-with-window
;; Cycle to the next group in the group list, taking the current
;; window along.

;; -- Command: gprev-with-window
;; Cycle to the previous group in the group list, taking the current
;; window along.
